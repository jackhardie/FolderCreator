# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'foldercreatorupdate.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import sys
from pathlib import Path
import tkinter as tk
from tkinter import filedialog
from PyQt5 import QtCore, QtGui, QtWidgets

try:
    from configparser import ConfigParser
except ImportError:
    from ConfigParser import ConfigParser  # ver. < 3.0


class Ui_Dialog(object):

    def __init__(self):
        self.selected = None
        self.folderselection = None
        CONFIG_FILE_PATH = os.path.normpath(os.path.join(os.path.abspath(__file__), "..", "..", "config.ini"))
        self.settings = QtCore.QSettings(os.path.normpath(CONFIG_FILE_PATH), QtCore.QSettings.IniFormat)
        strucData = self.settings.value
        data = {"Project A": {"file_a.py": {"Test": "Test"}, "file_a.txt": None, "something.xls": "test2"},
                "Project B": {"file_b.csv", "photo.jpg"},
                "Project C": {}}
        self.strucData = data

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(400, 365)
        Dialog.setMinimumSize(QtCore.QSize(400, 120))
        Dialog.setSizeGripEnabled(True)
        Dialog.setModal(False)

        self.treeWidget = QtWidgets.QTreeWidget(Dialog)
        self.treeWidget.setGeometry(QtCore.QRect(20, 110, 256, 192))
        self.treeWidget.setObjectName("treeWidget")
        self.treeWidget.headerItem().setText(0, "")
        self.treeWidget.itemSelectionChanged.connect(self.loadAllMessages)
        self.updateTree(strucData=self.strucData)

        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(10, 20, 261, 22))
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setObjectName("lineEdit")

        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(290, 20, 93, 28))
        self.pushButton.clicked.connect(self.getFolder)
        self.pushButton.setObjectName("pushButton")

        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(40, 330, 93, 28))
        self.pushButton_2.clicked.connect(self.createfolder)
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.setGeometry(QtCore.QRect(150, 330, 93, 28))
        self.pushButton_3.clicked.connect(self.openfolder)
        self.pushButton_3.setObjectName("pushButton_3")

        self.pushButton_4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_4.setGeometry(QtCore.QRect(270, 330, 93, 28))
        self.pushButton_4.clicked.connect(self.Close)
        self.pushButton_4.setObjectName("pushButton_4")

        self.pushButton_5 = QtWidgets.QPushButton(Dialog)
        self.pushButton_5.setGeometry(QtCore.QRect(290, 110, 93, 28))
        self.pushButton_5.clicked.connect(self.getpreset)
        self.pushButton_5.setObjectName("pushButton_5")

        self.pushButton_6 = QtWidgets.QPushButton(Dialog)
        self.pushButton_6.setGeometry(QtCore.QRect(290, 160, 93, 28))
        self.pushButton_6.clicked.connect(self.savepreset)
        self.pushButton_6.setObjectName("pushButton_6")

        self.pushButton_7 = QtWidgets.QPushButton(Dialog)
        self.pushButton_7.setGeometry(QtCore.QRect(290, 270, 93, 28))
        self.pushButton_7.clicked.connect(self.Reset)
        self.pushButton_7.setObjectName("pushButton_7")

        self.pushButton_8 = QtWidgets.QPushButton(Dialog)
        self.pushButton_8.setGeometry(QtCore.QRect(10, 70, 111, 28))
        self.pushButton_8.clicked.connect(self.createSubfolder)
        self.pushButton_8.setObjectName("pushButton_8")

        self.pushButton_9 = QtWidgets.QPushButton(Dialog)
        self.pushButton_9.setGeometry(QtCore.QRect(130, 70, 111, 28))
        self.pushButton_9.clicked.connect(self.deleteSubfolder)
        self.pushButton_9.setObjectName("pushButton_9")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Folder Structure Creator"))
        self.pushButton.setText(_translate("Dialog", "Get Folder"))
        self.pushButton_2.setText(_translate("Dialog", "Create Folders"))
        self.pushButton_3.setText(_translate("Dialog", "Open Folder"))
        self.pushButton_4.setText(_translate("Dialog", "Close"))
        self.pushButton_5.setText(_translate("Dialog", "Get Preset"))
        self.pushButton_6.setText(_translate("Dialog", "Save Preset"))
        self.pushButton_7.setText(_translate("Dialog", "Reset"))
        self.pushButton_8.setText(_translate("Dialog", "Create Subfolder"))
        self.pushButton_9.setText(_translate("Dialog", "Delete Subfolder"))

    def loadAllMessages(self):
        getSelected = self.treeWidget.selectedItems()
        if getSelected:
            baseNode = getSelected[0]
            getChildNode = baseNode.text(0)
            self.selected = getChildNode

    def getpreset(self):
        root = tk.Tk()
        root.withdraw()
        try:
            presetSelection = filedialog.askopenfile('INI')
            config = configparser.ConfigParser()
            config.read(presetSelection)
        except:
            return

        self.strucData = config

    def savepreset(self):

        with open('FILE.INI', 'w') as configfile:  # save
            config.write(configfile)

    def Reset(self):
        self.treeWidget.clear()  # Clears entire tree widget

    def createSubfolder(self):
        currentItem = self.treeWidget.selectedItems()
        if self.selected is None:
            # subName = ["New Folder"]
            # item = QtWidgets.QTreeWidgetItem(value)
            # self.treeWidget.insertTopLevelItem(0, item)
            new = "New Folder"
            self.strucData[new].update[new]
            print(self.strucData)
            self.updateTree(strucData=self.strucData)
        else:

            new = "New Folder%"
            if self.selected in self.strucData:
                self.strucData[self.selected] = {}
                self.strucData[self.selected][new] = {}




            else:
                self.strucData[self.selected] = new
            # self.strucData[self.selected].update(new)
            print(self.strucData)
            self.updateTree(strucData=self.strucData)
        # subName = {"New Folder"}
        # item = QtWidgets.QTreeWidgetItem(subName)
        # parent.addChild(item)

    def deleteSubfolder(self):
        pass

    def updateTree(self, strucData):
        self.treeWidget.clear()
        ##https://stackoverflow.com/a/46096319/17882705
        item = QtWidgets.QTreeWidgetItem()
        def fill_item(item, strucData):
            def new_item(parent, text, val=None):
                child = QtWidgets.QTreeWidgetItem([text])
                fill_item(child, val)
                parent.addChild(child)
                child.setExpanded(True)

            if strucData is None:
                return
            elif isinstance(strucData, dict):
                for key, val in sorted(strucData.items()):
                    new_item(item, str(key), val)
            elif isinstance(strucData, (list, tuple)):
                for val in strucData:
                    text = (str(val) if not isinstance(val, (dict, list, tuple))
                            else '[%s]' % type(val).__name__)
                    new_item(item, text, val)
            else:
                new_item(item, str(strucData))

        fill_item(self.treeWidget.invisibleRootItem(), strucData)

        # items = {}
        # for key, values in strucData.items():
        #
        #     #if not key[0]:
        #
        #         item = QtWidgets.QTreeWidgetItem([key])
        #         if isinstance(values, dict):
        #             for k in values:
        #                 print(k)
        #         else:
        #             print("{0} : {1}".format(key, values))  # Test finding nested dictionary's for tree view
        #             # item = QtWidgets.QTreeWidgetItem([key])
        #             for value in values:
        #                 child = QtWidgets.QTreeWidgetItem([value])
        #                 item.addChild(child)
        #             items.values(item)



        #self.treeWidget.insertTopLevelItems(0, items)

    def getFolder(self):
        # print("get folder")
        root = tk.Tk()
        root.withdraw()
        self.folderselection = filedialog.askdirectory()
        self.lineEdit.setText(self.folderselection)
        # self.updateTree()

    def createfolder(self):

        exists = []

        while my_list:
            for item in my_list:
                if item[1] in exists or item[1] is "":
                    exists.append(item[0])
                    my_list.pop(my_list.index(item))

        print(my_list)

    def openfolder(self):
        # print("open")
        folder = self.folderselection
        if folder:
            os.startfile(folder)
        else:
            return

    def Close(self):
        # print("close")
        sys.exit(app.exec_())


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
